// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/registration_service.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/anuragkumar19/connect/api/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RegistrationServiceName is the fully-qualified name of the RegistrationService service.
	RegistrationServiceName = "auth.v1.RegistrationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegistrationServiceCreateRegistrationFlowProcedure is the fully-qualified name of the
	// RegistrationService's CreateRegistrationFlow RPC.
	RegistrationServiceCreateRegistrationFlowProcedure = "/auth.v1.RegistrationService/CreateRegistrationFlow"
	// RegistrationServiceUpdateRegistrationFlowProcedure is the fully-qualified name of the
	// RegistrationService's UpdateRegistrationFlow RPC.
	RegistrationServiceUpdateRegistrationFlowProcedure = "/auth.v1.RegistrationService/UpdateRegistrationFlow"
	// RegistrationServiceDeleteRegistrationFlowProcedure is the fully-qualified name of the
	// RegistrationService's DeleteRegistrationFlow RPC.
	RegistrationServiceDeleteRegistrationFlowProcedure = "/auth.v1.RegistrationService/DeleteRegistrationFlow"
	// RegistrationServiceCompleteRegistrationFlowProcedure is the fully-qualified name of the
	// RegistrationService's CompleteRegistrationFlow RPC.
	RegistrationServiceCompleteRegistrationFlowProcedure = "/auth.v1.RegistrationService/CompleteRegistrationFlow"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	registrationServiceServiceDescriptor                        = v1.File_auth_v1_registration_service_proto.Services().ByName("RegistrationService")
	registrationServiceCreateRegistrationFlowMethodDescriptor   = registrationServiceServiceDescriptor.Methods().ByName("CreateRegistrationFlow")
	registrationServiceUpdateRegistrationFlowMethodDescriptor   = registrationServiceServiceDescriptor.Methods().ByName("UpdateRegistrationFlow")
	registrationServiceDeleteRegistrationFlowMethodDescriptor   = registrationServiceServiceDescriptor.Methods().ByName("DeleteRegistrationFlow")
	registrationServiceCompleteRegistrationFlowMethodDescriptor = registrationServiceServiceDescriptor.Methods().ByName("CompleteRegistrationFlow")
)

// RegistrationServiceClient is a client for the auth.v1.RegistrationService service.
type RegistrationServiceClient interface {
	CreateRegistrationFlow(context.Context, *connect.Request[v1.CreateRegistrationFlowRequest]) (*connect.Response[v1.CreateRegistrationFlowResponse], error)
	UpdateRegistrationFlow(context.Context, *connect.Request[v1.UpdateRegistrationFlowRequest]) (*connect.Response[v1.UpdateRegistrationFlowResponse], error)
	DeleteRegistrationFlow(context.Context, *connect.Request[v1.DeleteRegistrationFlowRequest]) (*connect.Response[v1.DeleteRegistrationFlowResponse], error)
	CompleteRegistrationFlow(context.Context, *connect.Request[v1.CompleteRegistrationFlowRequest]) (*connect.Response[v1.CompleteRegistrationFlowResponse], error)
}

// NewRegistrationServiceClient constructs a client for the auth.v1.RegistrationService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistrationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RegistrationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &registrationServiceClient{
		createRegistrationFlow: connect.NewClient[v1.CreateRegistrationFlowRequest, v1.CreateRegistrationFlowResponse](
			httpClient,
			baseURL+RegistrationServiceCreateRegistrationFlowProcedure,
			connect.WithSchema(registrationServiceCreateRegistrationFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateRegistrationFlow: connect.NewClient[v1.UpdateRegistrationFlowRequest, v1.UpdateRegistrationFlowResponse](
			httpClient,
			baseURL+RegistrationServiceUpdateRegistrationFlowProcedure,
			connect.WithSchema(registrationServiceUpdateRegistrationFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteRegistrationFlow: connect.NewClient[v1.DeleteRegistrationFlowRequest, v1.DeleteRegistrationFlowResponse](
			httpClient,
			baseURL+RegistrationServiceDeleteRegistrationFlowProcedure,
			connect.WithSchema(registrationServiceDeleteRegistrationFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		completeRegistrationFlow: connect.NewClient[v1.CompleteRegistrationFlowRequest, v1.CompleteRegistrationFlowResponse](
			httpClient,
			baseURL+RegistrationServiceCompleteRegistrationFlowProcedure,
			connect.WithSchema(registrationServiceCompleteRegistrationFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// registrationServiceClient implements RegistrationServiceClient.
type registrationServiceClient struct {
	createRegistrationFlow   *connect.Client[v1.CreateRegistrationFlowRequest, v1.CreateRegistrationFlowResponse]
	updateRegistrationFlow   *connect.Client[v1.UpdateRegistrationFlowRequest, v1.UpdateRegistrationFlowResponse]
	deleteRegistrationFlow   *connect.Client[v1.DeleteRegistrationFlowRequest, v1.DeleteRegistrationFlowResponse]
	completeRegistrationFlow *connect.Client[v1.CompleteRegistrationFlowRequest, v1.CompleteRegistrationFlowResponse]
}

// CreateRegistrationFlow calls auth.v1.RegistrationService.CreateRegistrationFlow.
func (c *registrationServiceClient) CreateRegistrationFlow(ctx context.Context, req *connect.Request[v1.CreateRegistrationFlowRequest]) (*connect.Response[v1.CreateRegistrationFlowResponse], error) {
	return c.createRegistrationFlow.CallUnary(ctx, req)
}

// UpdateRegistrationFlow calls auth.v1.RegistrationService.UpdateRegistrationFlow.
func (c *registrationServiceClient) UpdateRegistrationFlow(ctx context.Context, req *connect.Request[v1.UpdateRegistrationFlowRequest]) (*connect.Response[v1.UpdateRegistrationFlowResponse], error) {
	return c.updateRegistrationFlow.CallUnary(ctx, req)
}

// DeleteRegistrationFlow calls auth.v1.RegistrationService.DeleteRegistrationFlow.
func (c *registrationServiceClient) DeleteRegistrationFlow(ctx context.Context, req *connect.Request[v1.DeleteRegistrationFlowRequest]) (*connect.Response[v1.DeleteRegistrationFlowResponse], error) {
	return c.deleteRegistrationFlow.CallUnary(ctx, req)
}

// CompleteRegistrationFlow calls auth.v1.RegistrationService.CompleteRegistrationFlow.
func (c *registrationServiceClient) CompleteRegistrationFlow(ctx context.Context, req *connect.Request[v1.CompleteRegistrationFlowRequest]) (*connect.Response[v1.CompleteRegistrationFlowResponse], error) {
	return c.completeRegistrationFlow.CallUnary(ctx, req)
}

// RegistrationServiceHandler is an implementation of the auth.v1.RegistrationService service.
type RegistrationServiceHandler interface {
	CreateRegistrationFlow(context.Context, *connect.Request[v1.CreateRegistrationFlowRequest]) (*connect.Response[v1.CreateRegistrationFlowResponse], error)
	UpdateRegistrationFlow(context.Context, *connect.Request[v1.UpdateRegistrationFlowRequest]) (*connect.Response[v1.UpdateRegistrationFlowResponse], error)
	DeleteRegistrationFlow(context.Context, *connect.Request[v1.DeleteRegistrationFlowRequest]) (*connect.Response[v1.DeleteRegistrationFlowResponse], error)
	CompleteRegistrationFlow(context.Context, *connect.Request[v1.CompleteRegistrationFlowRequest]) (*connect.Response[v1.CompleteRegistrationFlowResponse], error)
}

// NewRegistrationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistrationServiceHandler(svc RegistrationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	registrationServiceCreateRegistrationFlowHandler := connect.NewUnaryHandler(
		RegistrationServiceCreateRegistrationFlowProcedure,
		svc.CreateRegistrationFlow,
		connect.WithSchema(registrationServiceCreateRegistrationFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	registrationServiceUpdateRegistrationFlowHandler := connect.NewUnaryHandler(
		RegistrationServiceUpdateRegistrationFlowProcedure,
		svc.UpdateRegistrationFlow,
		connect.WithSchema(registrationServiceUpdateRegistrationFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	registrationServiceDeleteRegistrationFlowHandler := connect.NewUnaryHandler(
		RegistrationServiceDeleteRegistrationFlowProcedure,
		svc.DeleteRegistrationFlow,
		connect.WithSchema(registrationServiceDeleteRegistrationFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	registrationServiceCompleteRegistrationFlowHandler := connect.NewUnaryHandler(
		RegistrationServiceCompleteRegistrationFlowProcedure,
		svc.CompleteRegistrationFlow,
		connect.WithSchema(registrationServiceCompleteRegistrationFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.RegistrationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistrationServiceCreateRegistrationFlowProcedure:
			registrationServiceCreateRegistrationFlowHandler.ServeHTTP(w, r)
		case RegistrationServiceUpdateRegistrationFlowProcedure:
			registrationServiceUpdateRegistrationFlowHandler.ServeHTTP(w, r)
		case RegistrationServiceDeleteRegistrationFlowProcedure:
			registrationServiceDeleteRegistrationFlowHandler.ServeHTTP(w, r)
		case RegistrationServiceCompleteRegistrationFlowProcedure:
			registrationServiceCompleteRegistrationFlowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistrationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistrationServiceHandler struct{}

func (UnimplementedRegistrationServiceHandler) CreateRegistrationFlow(context.Context, *connect.Request[v1.CreateRegistrationFlowRequest]) (*connect.Response[v1.CreateRegistrationFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.RegistrationService.CreateRegistrationFlow is not implemented"))
}

func (UnimplementedRegistrationServiceHandler) UpdateRegistrationFlow(context.Context, *connect.Request[v1.UpdateRegistrationFlowRequest]) (*connect.Response[v1.UpdateRegistrationFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.RegistrationService.UpdateRegistrationFlow is not implemented"))
}

func (UnimplementedRegistrationServiceHandler) DeleteRegistrationFlow(context.Context, *connect.Request[v1.DeleteRegistrationFlowRequest]) (*connect.Response[v1.DeleteRegistrationFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.RegistrationService.DeleteRegistrationFlow is not implemented"))
}

func (UnimplementedRegistrationServiceHandler) CompleteRegistrationFlow(context.Context, *connect.Request[v1.CompleteRegistrationFlowRequest]) (*connect.Response[v1.CompleteRegistrationFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.RegistrationService.CompleteRegistrationFlow is not implemented"))
}
