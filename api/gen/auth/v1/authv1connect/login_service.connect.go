// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/login_service.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/anuragkumar19/connect/api/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// LoginServiceName is the fully-qualified name of the LoginService service.
	LoginServiceName = "auth.v1.LoginService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LoginServiceCreateLoginFlowProcedure is the fully-qualified name of the LoginService's
	// CreateLoginFlow RPC.
	LoginServiceCreateLoginFlowProcedure = "/auth.v1.LoginService/CreateLoginFlow"
	// LoginServiceUpdateLoginFlowProcedure is the fully-qualified name of the LoginService's
	// UpdateLoginFlow RPC.
	LoginServiceUpdateLoginFlowProcedure = "/auth.v1.LoginService/UpdateLoginFlow"
	// LoginServiceDeleteLoginFlowProcedure is the fully-qualified name of the LoginService's
	// DeleteLoginFlow RPC.
	LoginServiceDeleteLoginFlowProcedure = "/auth.v1.LoginService/DeleteLoginFlow"
	// LoginServiceCompleteLoginFlowProcedure is the fully-qualified name of the LoginService's
	// CompleteLoginFlow RPC.
	LoginServiceCompleteLoginFlowProcedure = "/auth.v1.LoginService/CompleteLoginFlow"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	loginServiceServiceDescriptor                 = v1.File_auth_v1_login_service_proto.Services().ByName("LoginService")
	loginServiceCreateLoginFlowMethodDescriptor   = loginServiceServiceDescriptor.Methods().ByName("CreateLoginFlow")
	loginServiceUpdateLoginFlowMethodDescriptor   = loginServiceServiceDescriptor.Methods().ByName("UpdateLoginFlow")
	loginServiceDeleteLoginFlowMethodDescriptor   = loginServiceServiceDescriptor.Methods().ByName("DeleteLoginFlow")
	loginServiceCompleteLoginFlowMethodDescriptor = loginServiceServiceDescriptor.Methods().ByName("CompleteLoginFlow")
)

// LoginServiceClient is a client for the auth.v1.LoginService service.
type LoginServiceClient interface {
	CreateLoginFlow(context.Context, *connect.Request[v1.CreateLoginFlowRequest]) (*connect.Response[v1.CreateLoginFlowResponse], error)
	UpdateLoginFlow(context.Context, *connect.Request[v1.UpdateLoginFlowRequest]) (*connect.Response[v1.UpdateLoginFlowResponse], error)
	DeleteLoginFlow(context.Context, *connect.Request[v1.DeleteLoginFlowRequest]) (*connect.Response[v1.DeleteLoginFlowResponse], error)
	CompleteLoginFlow(context.Context, *connect.Request[v1.CompleteLoginFlowRequest]) (*connect.Response[v1.CompleteLoginFlowResponse], error)
}

// NewLoginServiceClient constructs a client for the auth.v1.LoginService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLoginServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) LoginServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &loginServiceClient{
		createLoginFlow: connect.NewClient[v1.CreateLoginFlowRequest, v1.CreateLoginFlowResponse](
			httpClient,
			baseURL+LoginServiceCreateLoginFlowProcedure,
			connect.WithSchema(loginServiceCreateLoginFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateLoginFlow: connect.NewClient[v1.UpdateLoginFlowRequest, v1.UpdateLoginFlowResponse](
			httpClient,
			baseURL+LoginServiceUpdateLoginFlowProcedure,
			connect.WithSchema(loginServiceUpdateLoginFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteLoginFlow: connect.NewClient[v1.DeleteLoginFlowRequest, v1.DeleteLoginFlowResponse](
			httpClient,
			baseURL+LoginServiceDeleteLoginFlowProcedure,
			connect.WithSchema(loginServiceDeleteLoginFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		completeLoginFlow: connect.NewClient[v1.CompleteLoginFlowRequest, v1.CompleteLoginFlowResponse](
			httpClient,
			baseURL+LoginServiceCompleteLoginFlowProcedure,
			connect.WithSchema(loginServiceCompleteLoginFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// loginServiceClient implements LoginServiceClient.
type loginServiceClient struct {
	createLoginFlow   *connect.Client[v1.CreateLoginFlowRequest, v1.CreateLoginFlowResponse]
	updateLoginFlow   *connect.Client[v1.UpdateLoginFlowRequest, v1.UpdateLoginFlowResponse]
	deleteLoginFlow   *connect.Client[v1.DeleteLoginFlowRequest, v1.DeleteLoginFlowResponse]
	completeLoginFlow *connect.Client[v1.CompleteLoginFlowRequest, v1.CompleteLoginFlowResponse]
}

// CreateLoginFlow calls auth.v1.LoginService.CreateLoginFlow.
func (c *loginServiceClient) CreateLoginFlow(ctx context.Context, req *connect.Request[v1.CreateLoginFlowRequest]) (*connect.Response[v1.CreateLoginFlowResponse], error) {
	return c.createLoginFlow.CallUnary(ctx, req)
}

// UpdateLoginFlow calls auth.v1.LoginService.UpdateLoginFlow.
func (c *loginServiceClient) UpdateLoginFlow(ctx context.Context, req *connect.Request[v1.UpdateLoginFlowRequest]) (*connect.Response[v1.UpdateLoginFlowResponse], error) {
	return c.updateLoginFlow.CallUnary(ctx, req)
}

// DeleteLoginFlow calls auth.v1.LoginService.DeleteLoginFlow.
func (c *loginServiceClient) DeleteLoginFlow(ctx context.Context, req *connect.Request[v1.DeleteLoginFlowRequest]) (*connect.Response[v1.DeleteLoginFlowResponse], error) {
	return c.deleteLoginFlow.CallUnary(ctx, req)
}

// CompleteLoginFlow calls auth.v1.LoginService.CompleteLoginFlow.
func (c *loginServiceClient) CompleteLoginFlow(ctx context.Context, req *connect.Request[v1.CompleteLoginFlowRequest]) (*connect.Response[v1.CompleteLoginFlowResponse], error) {
	return c.completeLoginFlow.CallUnary(ctx, req)
}

// LoginServiceHandler is an implementation of the auth.v1.LoginService service.
type LoginServiceHandler interface {
	CreateLoginFlow(context.Context, *connect.Request[v1.CreateLoginFlowRequest]) (*connect.Response[v1.CreateLoginFlowResponse], error)
	UpdateLoginFlow(context.Context, *connect.Request[v1.UpdateLoginFlowRequest]) (*connect.Response[v1.UpdateLoginFlowResponse], error)
	DeleteLoginFlow(context.Context, *connect.Request[v1.DeleteLoginFlowRequest]) (*connect.Response[v1.DeleteLoginFlowResponse], error)
	CompleteLoginFlow(context.Context, *connect.Request[v1.CompleteLoginFlowRequest]) (*connect.Response[v1.CompleteLoginFlowResponse], error)
}

// NewLoginServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLoginServiceHandler(svc LoginServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	loginServiceCreateLoginFlowHandler := connect.NewUnaryHandler(
		LoginServiceCreateLoginFlowProcedure,
		svc.CreateLoginFlow,
		connect.WithSchema(loginServiceCreateLoginFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceUpdateLoginFlowHandler := connect.NewUnaryHandler(
		LoginServiceUpdateLoginFlowProcedure,
		svc.UpdateLoginFlow,
		connect.WithSchema(loginServiceUpdateLoginFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceDeleteLoginFlowHandler := connect.NewUnaryHandler(
		LoginServiceDeleteLoginFlowProcedure,
		svc.DeleteLoginFlow,
		connect.WithSchema(loginServiceDeleteLoginFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	loginServiceCompleteLoginFlowHandler := connect.NewUnaryHandler(
		LoginServiceCompleteLoginFlowProcedure,
		svc.CompleteLoginFlow,
		connect.WithSchema(loginServiceCompleteLoginFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.LoginService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LoginServiceCreateLoginFlowProcedure:
			loginServiceCreateLoginFlowHandler.ServeHTTP(w, r)
		case LoginServiceUpdateLoginFlowProcedure:
			loginServiceUpdateLoginFlowHandler.ServeHTTP(w, r)
		case LoginServiceDeleteLoginFlowProcedure:
			loginServiceDeleteLoginFlowHandler.ServeHTTP(w, r)
		case LoginServiceCompleteLoginFlowProcedure:
			loginServiceCompleteLoginFlowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLoginServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLoginServiceHandler struct{}

func (UnimplementedLoginServiceHandler) CreateLoginFlow(context.Context, *connect.Request[v1.CreateLoginFlowRequest]) (*connect.Response[v1.CreateLoginFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.LoginService.CreateLoginFlow is not implemented"))
}

func (UnimplementedLoginServiceHandler) UpdateLoginFlow(context.Context, *connect.Request[v1.UpdateLoginFlowRequest]) (*connect.Response[v1.UpdateLoginFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.LoginService.UpdateLoginFlow is not implemented"))
}

func (UnimplementedLoginServiceHandler) DeleteLoginFlow(context.Context, *connect.Request[v1.DeleteLoginFlowRequest]) (*connect.Response[v1.DeleteLoginFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.LoginService.DeleteLoginFlow is not implemented"))
}

func (UnimplementedLoginServiceHandler) CompleteLoginFlow(context.Context, *connect.Request[v1.CompleteLoginFlowRequest]) (*connect.Response[v1.CompleteLoginFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.LoginService.CompleteLoginFlow is not implemented"))
}
