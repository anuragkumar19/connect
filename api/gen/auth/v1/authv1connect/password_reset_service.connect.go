// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: auth/v1/password_reset_service.proto

package authv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/anuragkumar19/connect/api/gen/auth/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PasswordResetServiceName is the fully-qualified name of the PasswordResetService service.
	PasswordResetServiceName = "auth.v1.PasswordResetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PasswordResetServiceCreatePasswordResetFlowProcedure is the fully-qualified name of the
	// PasswordResetService's CreatePasswordResetFlow RPC.
	PasswordResetServiceCreatePasswordResetFlowProcedure = "/auth.v1.PasswordResetService/CreatePasswordResetFlow"
	// PasswordResetServiceUpdatePasswordResetFlowProcedure is the fully-qualified name of the
	// PasswordResetService's UpdatePasswordResetFlow RPC.
	PasswordResetServiceUpdatePasswordResetFlowProcedure = "/auth.v1.PasswordResetService/UpdatePasswordResetFlow"
	// PasswordResetServiceDeletePasswordResetFlowProcedure is the fully-qualified name of the
	// PasswordResetService's DeletePasswordResetFlow RPC.
	PasswordResetServiceDeletePasswordResetFlowProcedure = "/auth.v1.PasswordResetService/DeletePasswordResetFlow"
	// PasswordResetServiceCompletePasswordResetFlowProcedure is the fully-qualified name of the
	// PasswordResetService's CompletePasswordResetFlow RPC.
	PasswordResetServiceCompletePasswordResetFlowProcedure = "/auth.v1.PasswordResetService/CompletePasswordResetFlow"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	passwordResetServiceServiceDescriptor                         = v1.File_auth_v1_password_reset_service_proto.Services().ByName("PasswordResetService")
	passwordResetServiceCreatePasswordResetFlowMethodDescriptor   = passwordResetServiceServiceDescriptor.Methods().ByName("CreatePasswordResetFlow")
	passwordResetServiceUpdatePasswordResetFlowMethodDescriptor   = passwordResetServiceServiceDescriptor.Methods().ByName("UpdatePasswordResetFlow")
	passwordResetServiceDeletePasswordResetFlowMethodDescriptor   = passwordResetServiceServiceDescriptor.Methods().ByName("DeletePasswordResetFlow")
	passwordResetServiceCompletePasswordResetFlowMethodDescriptor = passwordResetServiceServiceDescriptor.Methods().ByName("CompletePasswordResetFlow")
)

// PasswordResetServiceClient is a client for the auth.v1.PasswordResetService service.
type PasswordResetServiceClient interface {
	CreatePasswordResetFlow(context.Context, *connect.Request[v1.CreatePasswordResetFlowRequest]) (*connect.Response[v1.CreatePasswordResetFlowResponse], error)
	UpdatePasswordResetFlow(context.Context, *connect.Request[v1.UpdatePasswordResetFlowRequest]) (*connect.Response[v1.UpdatePasswordResetFlowResponse], error)
	DeletePasswordResetFlow(context.Context, *connect.Request[v1.DeletePasswordResetFlowRequest]) (*connect.Response[v1.DeletePasswordResetFlowResponse], error)
	CompletePasswordResetFlow(context.Context, *connect.Request[v1.CompletePasswordResetFlowRequest]) (*connect.Response[v1.CompletePasswordResetFlowResponse], error)
}

// NewPasswordResetServiceClient constructs a client for the auth.v1.PasswordResetService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPasswordResetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PasswordResetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &passwordResetServiceClient{
		createPasswordResetFlow: connect.NewClient[v1.CreatePasswordResetFlowRequest, v1.CreatePasswordResetFlowResponse](
			httpClient,
			baseURL+PasswordResetServiceCreatePasswordResetFlowProcedure,
			connect.WithSchema(passwordResetServiceCreatePasswordResetFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updatePasswordResetFlow: connect.NewClient[v1.UpdatePasswordResetFlowRequest, v1.UpdatePasswordResetFlowResponse](
			httpClient,
			baseURL+PasswordResetServiceUpdatePasswordResetFlowProcedure,
			connect.WithSchema(passwordResetServiceUpdatePasswordResetFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deletePasswordResetFlow: connect.NewClient[v1.DeletePasswordResetFlowRequest, v1.DeletePasswordResetFlowResponse](
			httpClient,
			baseURL+PasswordResetServiceDeletePasswordResetFlowProcedure,
			connect.WithSchema(passwordResetServiceDeletePasswordResetFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		completePasswordResetFlow: connect.NewClient[v1.CompletePasswordResetFlowRequest, v1.CompletePasswordResetFlowResponse](
			httpClient,
			baseURL+PasswordResetServiceCompletePasswordResetFlowProcedure,
			connect.WithSchema(passwordResetServiceCompletePasswordResetFlowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// passwordResetServiceClient implements PasswordResetServiceClient.
type passwordResetServiceClient struct {
	createPasswordResetFlow   *connect.Client[v1.CreatePasswordResetFlowRequest, v1.CreatePasswordResetFlowResponse]
	updatePasswordResetFlow   *connect.Client[v1.UpdatePasswordResetFlowRequest, v1.UpdatePasswordResetFlowResponse]
	deletePasswordResetFlow   *connect.Client[v1.DeletePasswordResetFlowRequest, v1.DeletePasswordResetFlowResponse]
	completePasswordResetFlow *connect.Client[v1.CompletePasswordResetFlowRequest, v1.CompletePasswordResetFlowResponse]
}

// CreatePasswordResetFlow calls auth.v1.PasswordResetService.CreatePasswordResetFlow.
func (c *passwordResetServiceClient) CreatePasswordResetFlow(ctx context.Context, req *connect.Request[v1.CreatePasswordResetFlowRequest]) (*connect.Response[v1.CreatePasswordResetFlowResponse], error) {
	return c.createPasswordResetFlow.CallUnary(ctx, req)
}

// UpdatePasswordResetFlow calls auth.v1.PasswordResetService.UpdatePasswordResetFlow.
func (c *passwordResetServiceClient) UpdatePasswordResetFlow(ctx context.Context, req *connect.Request[v1.UpdatePasswordResetFlowRequest]) (*connect.Response[v1.UpdatePasswordResetFlowResponse], error) {
	return c.updatePasswordResetFlow.CallUnary(ctx, req)
}

// DeletePasswordResetFlow calls auth.v1.PasswordResetService.DeletePasswordResetFlow.
func (c *passwordResetServiceClient) DeletePasswordResetFlow(ctx context.Context, req *connect.Request[v1.DeletePasswordResetFlowRequest]) (*connect.Response[v1.DeletePasswordResetFlowResponse], error) {
	return c.deletePasswordResetFlow.CallUnary(ctx, req)
}

// CompletePasswordResetFlow calls auth.v1.PasswordResetService.CompletePasswordResetFlow.
func (c *passwordResetServiceClient) CompletePasswordResetFlow(ctx context.Context, req *connect.Request[v1.CompletePasswordResetFlowRequest]) (*connect.Response[v1.CompletePasswordResetFlowResponse], error) {
	return c.completePasswordResetFlow.CallUnary(ctx, req)
}

// PasswordResetServiceHandler is an implementation of the auth.v1.PasswordResetService service.
type PasswordResetServiceHandler interface {
	CreatePasswordResetFlow(context.Context, *connect.Request[v1.CreatePasswordResetFlowRequest]) (*connect.Response[v1.CreatePasswordResetFlowResponse], error)
	UpdatePasswordResetFlow(context.Context, *connect.Request[v1.UpdatePasswordResetFlowRequest]) (*connect.Response[v1.UpdatePasswordResetFlowResponse], error)
	DeletePasswordResetFlow(context.Context, *connect.Request[v1.DeletePasswordResetFlowRequest]) (*connect.Response[v1.DeletePasswordResetFlowResponse], error)
	CompletePasswordResetFlow(context.Context, *connect.Request[v1.CompletePasswordResetFlowRequest]) (*connect.Response[v1.CompletePasswordResetFlowResponse], error)
}

// NewPasswordResetServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPasswordResetServiceHandler(svc PasswordResetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	passwordResetServiceCreatePasswordResetFlowHandler := connect.NewUnaryHandler(
		PasswordResetServiceCreatePasswordResetFlowProcedure,
		svc.CreatePasswordResetFlow,
		connect.WithSchema(passwordResetServiceCreatePasswordResetFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	passwordResetServiceUpdatePasswordResetFlowHandler := connect.NewUnaryHandler(
		PasswordResetServiceUpdatePasswordResetFlowProcedure,
		svc.UpdatePasswordResetFlow,
		connect.WithSchema(passwordResetServiceUpdatePasswordResetFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	passwordResetServiceDeletePasswordResetFlowHandler := connect.NewUnaryHandler(
		PasswordResetServiceDeletePasswordResetFlowProcedure,
		svc.DeletePasswordResetFlow,
		connect.WithSchema(passwordResetServiceDeletePasswordResetFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	passwordResetServiceCompletePasswordResetFlowHandler := connect.NewUnaryHandler(
		PasswordResetServiceCompletePasswordResetFlowProcedure,
		svc.CompletePasswordResetFlow,
		connect.WithSchema(passwordResetServiceCompletePasswordResetFlowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/auth.v1.PasswordResetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PasswordResetServiceCreatePasswordResetFlowProcedure:
			passwordResetServiceCreatePasswordResetFlowHandler.ServeHTTP(w, r)
		case PasswordResetServiceUpdatePasswordResetFlowProcedure:
			passwordResetServiceUpdatePasswordResetFlowHandler.ServeHTTP(w, r)
		case PasswordResetServiceDeletePasswordResetFlowProcedure:
			passwordResetServiceDeletePasswordResetFlowHandler.ServeHTTP(w, r)
		case PasswordResetServiceCompletePasswordResetFlowProcedure:
			passwordResetServiceCompletePasswordResetFlowHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPasswordResetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPasswordResetServiceHandler struct{}

func (UnimplementedPasswordResetServiceHandler) CreatePasswordResetFlow(context.Context, *connect.Request[v1.CreatePasswordResetFlowRequest]) (*connect.Response[v1.CreatePasswordResetFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordResetService.CreatePasswordResetFlow is not implemented"))
}

func (UnimplementedPasswordResetServiceHandler) UpdatePasswordResetFlow(context.Context, *connect.Request[v1.UpdatePasswordResetFlowRequest]) (*connect.Response[v1.UpdatePasswordResetFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordResetService.UpdatePasswordResetFlow is not implemented"))
}

func (UnimplementedPasswordResetServiceHandler) DeletePasswordResetFlow(context.Context, *connect.Request[v1.DeletePasswordResetFlowRequest]) (*connect.Response[v1.DeletePasswordResetFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordResetService.DeletePasswordResetFlow is not implemented"))
}

func (UnimplementedPasswordResetServiceHandler) CompletePasswordResetFlow(context.Context, *connect.Request[v1.CompletePasswordResetFlowRequest]) (*connect.Response[v1.CompletePasswordResetFlowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("auth.v1.PasswordResetService.CompletePasswordResetFlow is not implemented"))
}
