// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rate_limit_buckets.sql

package database

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRateLimitBucket = `-- name: CreateRateLimitBucket :exec
INSERT INTO
    "rate_limit_buckets" ("id", "last_reset_at", "version", "consumed", "last_consumed_at")
VALUES
    ($1, $2, $3, $4, $5)
`

type CreateRateLimitBucketParams struct {
	ID             string
	LastResetAt    time.Time
	Version        int32
	Consumed       int64
	LastConsumedAt pgtype.Timestamptz
}

func (q *Queries) CreateRateLimitBucket(ctx context.Context, arg *CreateRateLimitBucketParams) error {
	_, err := q.db.Exec(ctx, createRateLimitBucket,
		arg.ID,
		arg.LastResetAt,
		arg.Version,
		arg.Consumed,
		arg.LastConsumedAt,
	)
	return err
}

const getRateLimitBucket = `-- name: GetRateLimitBucket :one
SELECT
    id, created_at, last_reset_at, version, consumed, last_consumed_at
FROM
    "rate_limit_buckets"
WHERE
    "id" = $1
`

func (q *Queries) GetRateLimitBucket(ctx context.Context, id string) (RateLimitBucket, error) {
	row := q.db.QueryRow(ctx, getRateLimitBucket, id)
	var i RateLimitBucket
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastResetAt,
		&i.Version,
		&i.Consumed,
		&i.LastConsumedAt,
	)
	return i, err
}

const updateRateLimitBucket = `-- name: UpdateRateLimitBucket :one
UPDATE "rate_limit_buckets"
SET
    "last_reset_at" = $1,
    "consumed" = $2,
    "last_consumed_at" = $3,
    "version" = "version" + 1
WHERE
    "id" = $4
    AND "version" = $5
RETURNING
    id, created_at, last_reset_at, version, consumed, last_consumed_at
`

type UpdateRateLimitBucketParams struct {
	LastResetAt    time.Time
	Consumed       int64
	LastConsumedAt pgtype.Timestamptz
	ID             string
	Version        int32
}

func (q *Queries) UpdateRateLimitBucket(ctx context.Context, arg *UpdateRateLimitBucketParams) (RateLimitBucket, error) {
	row := q.db.QueryRow(ctx, updateRateLimitBucket,
		arg.LastResetAt,
		arg.Consumed,
		arg.LastConsumedAt,
		arg.ID,
		arg.Version,
	)
	var i RateLimitBucket
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.LastResetAt,
		&i.Version,
		&i.Consumed,
		&i.LastConsumedAt,
	)
	return i, err
}
