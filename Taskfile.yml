version: "3"
output: prefixed
interval: 0s
dotenv: [".env"]
vars:
  PWD:
    sh: "pwd"
  CONNECT_SERVER_BUILD_BIN: '{{joinPath .PWD "bin/connect-server" | toSlash}}{{exeExt}}'
  CONNECT_SERVER_DEV_BIN: '{{joinPath .PWD "tmp/connect-server" | toSlash}}{{exeExt}}'
  # GOVULNCHECK_BIN: '{{joinPath .PWD "tools/bin/govulncheck" | toSlash}}{{exeExt}}'

  TOOLS: go tool -modfile ./tools/go.mod
  DOCKER_INFRA_FLAGS: "-p connect_dev_infra -f ./docker/dev/docker-compose-infra.yml"
tasks:
  setup-tools:
    dir: "tools"
    cmds:
      - go mod download
  infra-create:
    cmds:
      - "docker compose {{.DOCKER_INFRA_FLAGS}} create"
  infra-up:
    cmds:
      - "docker compose {{.DOCKER_INFRA_FLAGS}} up -d"
  infra-down:
    cmds:
      - "docker compose {{.DOCKER_INFRA_FLAGS}} down"
  infra-start:
    cmds:
      - "docker compose {{.DOCKER_INFRA_FLAGS}} start"
  infra-stop:
    cmds:
      - "docker compose {{.DOCKER_INFRA_FLAGS}} stop"
  infra-restart:
    cmds:
      - "docker compose {{.DOCKER_INFRA_FLAGS}} restart"
  setup:
    deps:
      - setup-tools
      - infra-create
  build:
    cmds:
      - 'go build -o {{shellQuote .CONNECT_SERVER_BUILD_BIN}} -ldflags="{{.LINKER_FLAG}}" ./cmd/connect-server'
      - "echo 'Successfully build: {{.CONNECT_SERVER_BUILD_BIN}}'"
    vars:
      NOW: '{{now | date "2006-01-02T15:04:05Z07:00"}}'
      COMMIT_HASH_RAW:
        sh: "git log -n 1 --format=%h"
      COMMIT_HASH: "{{trim .COMMIT_HASH_RAW}}"
      BRANCH_RAW:
        sh: "git rev-parse --abbrev-ref HEAD"
      BRANCH: "{{trim .BRANCH_RAW}}"
      LINKER_FLAG: "-s -X main.commit={{shellQuote .COMMIT_HASH}} -X main.buildBranch={{shellQuote .BRANCH}} -X main.buildStampRFC3339={{shellQuote .NOW}}"
  dev-build:
    cmds:
      - "go build -o {{shellQuote .CONNECT_SERVER_DEV_BIN}} ./cmd/connect-server"
      - "echo 'Successfully build: {{.CONNECT_SERVER_DEV_BIN}}'"
    sources:
      - go.mod
      - go.sum
      - "**/*.go"
      - exclude: "tools/**/*"
    generates:
      - "{{.CONNECT_SERVER_DEV_BIN}}"
  dev-run:
    deps:
      - dev-build
    cmds:
      - "{{.CONNECT_SERVER_DEV_BIN}}"
  fmt-protobuf:
    cmds:
      - "{{.TOOLS}} buf format -w"
  fmt-yaml:
    cmds:
      - "{{.TOOLS}} yamlfmt ."
  fmt-go:
    - "go fmt ./..."
  fmt:
    cmds:
      - task: fmt-yaml
      - task: fmt-protobuf
      - task: fmt-go
  lint-go-std:
    cmds:
      - "go vet ./..."
  lint-go-ci:
    cmds:
      - "{{.TOOLS}} golangci-lint run"
  lint-go:
    cmds:
      - task: lint-go-std
      - task: lint-go-ci
  lint-protobuf:
    cmds:
      - "{{.TOOLS}} buf lint"
  lint-sql:
    - "{{.TOOLS}} sqlc vet"
  lint:
    cmds:
      - task: lint-go
      - task: lint-protobuf
      - task: lint-sql
  generate-sql:
    cmds:
      - "{{.TOOLS}} sqlc generate"
    sources:
      - sqlc.yaml
      - database/sql/**/*.sql
    generates:
      - database/*.go
  generate-api:
    cmds:
      - "{{.TOOLS}} buf generate --template ./api/buf.gen.yaml"
    sources:
      - buf.yaml
      - api/buf.gen.yaml
      - api/proto/**/*
    generates:
      - api/gen/**/*.go
  generate-events:
    cmds:
      - "{{.TOOLS}} buf generate --template ./events/buf.gen.yaml"
    sources:
      - buf.yaml
      - events/buf.gen.yaml
      - events/proto/**/*
    generates:
      - events/gen/**/*.go
  generate:
    cmds:
      - task: generate-sql
      - task: generate-api
      - task: generate-events
  migrate:
    env:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: "{{.POSTGRES_URI}}"
      GOOSE_MIGRATION_DIR: database/sql/schema
    cmds:
      - "{{.TOOLS}} goose {{.CLI_ARGS}}"
    requires:
      vars:
        - POSTGRES_URI
  go-vuln-check:
    cmds:
      - "{{.TOOLS}} govulncheck ./..."
